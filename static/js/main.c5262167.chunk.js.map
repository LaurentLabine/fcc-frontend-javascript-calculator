{"version":3,"sources":["calculator/styles.jsx","calculator/calculator.jsx","reportWebVitals.js","index.js"],"names":["createGlobalStyle","numberToWords","require","inputs","zero","one","two","three","four","five","six","seven","eight","nine","operators","add","subtract","multiply","divide","Digit","props","className","id","toWords","value","operation","onClick","handler","Operator","Calculator","state","x","data","display","memory","handleInput","bind","e","input","target","str","res","arr","evaluate","eval","this","filterInput","concat","join","replace","error","setState","length","includes","limitReached","handleDigit","handleOperator","inpArr","tmpOprArr","resArr","i","isNaN","push","slice","toString","digit","newX","newDisplay","newMemory","firstDigit","operator","tmpArr","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c5262167.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components/macro';\n\nexport default createGlobalStyle`\n\n@font-face {\n    font-family: 'Digital';\n    src: url('//db.onlinewebfonts.com/t/8e22783d707ad140bffe18b2a3812529.eot');\n    src: url('//db.onlinewebfonts.com/t/8e22783d707ad140bffe18b2a3812529.eot?#iefix')\n        format('embedded-opentype'),\n        url('//db.onlinewebfonts.com/t/8e22783d707ad140bffe18b2a3812529.woff2')\n        format('woff2'),\n        url('//db.onlinewebfonts.com/t/8e22783d707ad140bffe18b2a3812529.woff')\n        format('woff'),\n        url('//db.onlinewebfonts.com/t/8e22783d707ad140bffe18b2a3812529.ttf')\n        format('truetype'),\n        url('//db.onlinewebfonts.com/t/8e22783d707ad140bffe18b2a3812529.svg#Digital-7')\n        format('svg');\n}\n\n@font-face {\n    font-family: \"Cool\"; \n    src: url(\"//db.onlinewebfonts.com/t/df7addca2738b1d78171b7257e3b4ab9.eot\"); \n    src: url(\"//db.onlinewebfonts.com/t/df7addca2738b1d78171b7257e3b4ab9.eot?#iefix\") \n        format(\"embedded-opentype\"), \n        url(\"//db.onlinewebfonts.com/t/df7addca2738b1d78171b7257e3b4ab9.woff2\") \n        format(\"woff2\"), url(\"//db.onlinewebfonts.com/t/df7addca2738b1d78171b7257e3b4ab9.woff\") \n        format(\"woff\"), \n        url(\"//db.onlinewebfonts.com/t/df7addca2738b1d78171b7257e3b4ab9.ttf\") \n        format(\"truetype\"), \n        url(\"//db.onlinewebfonts.com/t/df7addca2738b1d78171b7257e3b4ab9.svg#Cool\") \n        format(\"svg\"); \n}\n\n    #root {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    width: 100%;\n    font-family: 'digital';\n    }\n\n    html {\n        margin: 0;\n        padding:0;\n    }\n\n    body {\n        background-position: center;\n        background-image: url(\"https://user-images.githubusercontent.com/20836468/115396602-7526ec80-a1e5-11eb-83b6-19ce0920105b.jpg\");\n        background-position: center;\n    }\n\n    #calculator {\n        display: flex;\n        padding: 10px;\n        ${'' /* background-color: rgba(250,240,230, 0.8); */}\n        background-color: rgba(105,105,105, 0.8);\n        width: 420px;\n        ${'' /* min-height: 400px; */}\n        border-radius: 5px;\n        ${'' /* border: 2px solid white; */}\n    }\n\n    #outer {\n        position: relative;\n        display: grid;\n        grid-gap: 10px;\n        width:100%;\n    }\n\n    #outerDisplay {\n        display: inline-block;\n        max-width: 420px;\n        grid-column : 1/5;\n        background-color: white;\n        overflow-wrap: break-word;\n        word-wrap: break-word;\n        text-align: right;\n    }\n\n    #upperDisplay{\n        min-height: 30px;\n        font-family: digital;\n        font-size: 30px;\n        color: orange;\n    }\n\n    #display {\n        min-height: 50px;\n    }\n\n    .display-grid-item{\n        font-size: 50px;\n        overflow-wrap: break-word;\n        word-wrap: break-word;\n    } \n\n    .grid-item {\n        background-color: rgba(255, 255, 255, 0.5);\n        border: 1px solid rgba(0, 0, 0, 0.8);\n        font-size: 30px;\n        text-align: center;\n        vertical-align: center;\n        min-height: 80px;\n        font-family: cool;\n    }\n\n    #clear {\n        grid-column: 1 / 3;\n        background-color: rgba(196,2,51, 0.8);\n    }\n\n    #equals {\n        grid-row: 5/7 !important;\n        grid-column: 4;\n        background-color: rgba(127,255,0, 0.8)\n    }\n\n    #decimal {\n        background-color: rgba(238,255,27, 0.8);\n    }\n\n    #zero {\n        grid-row: 6/7;\n        grid-column: 1/3;\n    }\n    `;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport GlobalStyle from './styles';\n\nconst numberToWords = require('number-to-words');\n\nconst inputs = {\n  zero: '0',\n  one: '1',\n  two: '2',\n  three: '3',\n  four: '4',\n  five: '5',\n  six: '6',\n  seven: '7',\n  eight: '8',\n  nine: '9',\n};\n\nconst operators = {\n  add: '+',\n  subtract: '-',\n  multiply: '*',\n  divide: '/',\n};\n\nconst Input = (props) => {\n  return (\n    <button id={props.id} onClick={props.handler}>\n      {props.operation}\n    </button>\n  );\n};\n\nInput.propTypes = {\n  id: PropTypes.string,\n  handler: PropTypes.string,\n  operation: PropTypes.string,\n};\n\nconst Digit = (props) => {\n  return (\n    <button\n      className=\"grid-item\"\n      key={numberToWords.toWords(props.value)}\n      id={numberToWords.toWords(props.value)}\n      operation={props.value}\n      onClick={props.handler}\n    >\n      {props.value}\n    </button>\n  );\n};\n\nDigit.propTypes = {\n  value: PropTypes.number,\n  handler: PropTypes.func,\n};\n\nconst Operator = (props) => {\n  return (\n    <button\n      className=\"grid-item\"\n      id={props.id}\n      operation={props.operation}\n      onClick={props.handler}\n    >\n      {props.operation}\n    </button>\n  );\n};\n\nOperator.propTypes = {\n  id: PropTypes.string,\n  operation: PropTypes.string,\n  handler: PropTypes.func,\n};\n\nclass Calculator extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      x: '', // Current Number Being treated\n      data: [], // Formula\n      display: '0', // displayed Input\n      memory: '', // Upper Display\n    };\n\n    this.handleInput = this.handleInput.bind(this);\n  }\n\n  handleInput(e) {\n    const input = e.target.id;\n    let str = '';\n    let res = '';\n    let arr = [];\n\n    const evaluate = eval;\n    switch (input) {\n      case 'equals':\n        str = this.filterInput(this.state.data.concat(this.state.x))\n          .join('')\n          .replace(/,/g, '');\n        try {\n          res = evaluate(str);\n        } catch (error) {\n          res = '0';\n        }\n\n        if (!res) res = '0';\n\n        arr = [res];\n        this.setState({\n          display: res,\n          data: arr,\n          x: '',\n          memory: str + '=' + res,\n        });\n\n        break;\n      case 'clear':\n        this.setState({\n          x: '',\n          data: [],\n          display: '0',\n          memory: '',\n        });\n        break;\n      case 'decimal':\n        if (this.state.display.length < 16) {\n          if (!this.state.x.includes('.')) {\n            this.setState({\n              x: this.state.x + '.',\n              display: this.state.display + '.',\n              memory: this.state.memory + '.',\n            });\n          }\n        } else {\n          this.limitReached();\n        }\n        break;\n      default:\n        if (inputs[input]) {\n          this.handleDigit(input);\n        } else {\n          this.handleOperator(operators[input]);\n        }\n\n        break;\n    }\n  }\n\n  // If 2 or more operators are entered consecutively, the operation performed\n  // should be the last operator entered (excluding the negative (-) sign.\n\n  filterInput(inpArr) {\n    let tmpOprArr = [];\n    const resArr = [];\n\n    for (let i = 0; i < inpArr.length; i++) {\n      if (inpArr[i] === '') continue;\n\n      if (isNaN(inpArr[i])) {\n        // if it's a symbol, filter to a temporary array\n        tmpOprArr.push(inpArr[i]);\n      } else {\n        // If a number is found, filter the opr array to remove the unwanted operators\n        if (tmpOprArr.length > 1 && tmpOprArr.slice(-1).toString() === '-') {\n          // last operator is a negative\n          resArr.push(tmpOprArr.slice(-2));\n          tmpOprArr = [];\n        } else if (tmpOprArr.length > 1) {\n          resArr.push(tmpOprArr.slice(-1));\n          tmpOprArr = [];\n        } else {\n          resArr.push(tmpOprArr);\n          tmpOprArr = [];\n        }\n        resArr.push(inpArr[i]);\n      }\n    }\n    return resArr;\n  }\n\n  handleDigit(digit) {\n    let newX;\n    let newDisplay;\n    let newMemory;\n\n    if (this.state.display === '0') {\n      newX = inputs[digit];\n      newDisplay = inputs[digit];\n      newMemory = this.state.memory + inputs[digit];\n    } else {\n      newX = this.state.x + inputs[digit];\n      newDisplay = this.state.display + inputs[digit];\n      newMemory = this.state.memory + inputs[digit];\n    }\n\n    const firstDigit = newDisplay[0];\n\n    if (!(firstDigit >= '0' && firstDigit <= '9')) {\n      newDisplay = newDisplay.slice(1);\n    }\n\n    this.setState({\n      x: newX,\n      display: newDisplay,\n      memory: newMemory,\n    });\n  }\n\n  handleOperator(operator) {\n    const tmpArr = this.state.data;\n    let memory = '';\n\n    if (this.state.x !== '') tmpArr.push(this.state.x);\n\n    // If the display already contains a full airthmetic operation, Refresh it.  Otherwise keep adding.\n    if (this.state.memory.includes('=')) {\n      memory = this.state.display + operator;\n    } else {\n      memory = this.state.memory + operator;\n    }\n\n    tmpArr.push(operator);\n    this.setState({\n      data: tmpArr,\n      display: operator,\n      x: '',\n      memory: memory,\n    });\n  }\n\n  render() {\n    return (\n      <div id=\"calculator\">\n        <GlobalStyle />\n        <div id=\"outer\">\n          <div id=\"outerDisplay\" className=\"display-grid-item\">\n            <div id=\"upperDisplay\">{this.state.memory}</div>\n            <div id=\"display\">{this.state.display}</div>\n          </div>\n          <Operator id=\"clear\" operation=\"AC\" handler={this.handleInput} />\n          <Operator id=\"divide\" operation=\"/\" handler={this.handleInput} />\n          <Operator id=\"multiply\" operation=\"X\" handler={this.handleInput} />\n          <Digit value={7} handler={this.handleInput} />\n          <Digit value={8} handler={this.handleInput} />\n          <Digit value={9} handler={this.handleInput} />\n          <Operator id=\"subtract\" operation=\"-\" handler={this.handleInput} />\n          <Digit value={4} handler={this.handleInput} />\n          <Digit value={5} handler={this.handleInput} />\n          <Digit value={6} handler={this.handleInput} />\n          <Operator id=\"add\" operation=\"+\" handler={this.handleInput} />\n          <Digit value={1} handler={this.handleInput} />\n          <Digit value={2} handler={this.handleInput} />\n          <Digit value={3} handler={this.handleInput} />\n          <Operator id=\"equals\" operation=\"=\" handler={this.handleInput} />\n          <Digit value={0} handler={this.handleInput} />\n          <Operator id=\"decimal\" operation=\".\" handler={this.handleInput} />\n        </div>\n        <br />\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './calculator/calculator';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}